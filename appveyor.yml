image: Visual Studio 2017
environment:
  RUSTFLAGS: -Zunstable-options -Ctarget-feature=+crt-static
  matrix:
  # FIXME
  #- TARGET: i686-pc-windows-msvc
  #  BUILD_MSI: 1
  - TARGET: i686-pc-windows-gnu
    MINGW_DIR: mingw32
  - TARGET: x86_64-pc-windows-gnu
    MINGW_DIR: mingw64
  - TARGET: i686-pc-windows-msvc
  - TARGET: x86_64-pc-windows-msvc
  access_token:
    secure: q8Wqx0brgfpOYFQqWauvucE2h0o1WYb41a3gKaCKV9QiE4eTz6qLNlqyC3mdsp4Q
branches:
  only:
    - master
    - stable
    - auto

install:
  # Install MSYS2 and MINGW (32-bit & 64-bit)
  - ps: |
      # Check if MSYS2 was restored from cache
      if($env:MINGW_DIR) {
        if($env:MINGW_DIR -eq "mingw32") {
          # Download and install MINGW (32-bit)
          Write-Host "Installing MinGW (32-bit)..." -ForegroundColor Cyan
          Write-Host "Downloading installation package..."
          appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z -FileName mingw.7z
        } elseif($env:MINGW_DIR -eq "mingw64") {
          # Download and install MINGW (64-bit)
          Write-Host "Installing MinGW (64-bit)..." -ForegroundColor Cyan
          Write-Host "Downloading installation package..."
          appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z -FileName mingw.7z
        }
        Write-Host "Extracting installation package..."
        7z x -y mingw.7z -oC:\msys64 | Out-Null
        del mingw.7z
      } else {
        Write-Host "MSYS2 not required" -ForegroundColor Green
      }

  # Install rust, x86_64-pc-windows-msvc host
  - ps: |
      Write-Host "Installing MSYS2..." -ForegroundColor Cyan
      if(Test-path C:\msys64) {
          del C:\msys64 -Recurse -Force
      }
      # download installer
      $zipPath = "$($env:TEMP)\msys2-x86_64-latest.tar.xz"
      $tarPath = "$($env:TEMP)\msys2-x86_64-latest.tar"
      Write-Host "Downloading MSYS installation package..."
      (New-Object Net.WebClient).DownloadFile('http://repo.msys2.org/distrib/msys2-x86_64-latest.tar.xz', $zipPath)
      Write-Host "Untaring installation package..."
      7z x $zipPath -y -o"$env:TEMP" | Out-Null
      Write-Host "Unzipping installation package..."
      7z x $tarPath -y -oC:\ | Out-Null
      del $zipPath
      del $tarPath
      function bash($command) {
          Write-Host $command -NoNewline
          cmd /c start /wait C:\msys64\usr\bin\sh.exe --login -c $command
          Write-Host " - OK" -ForegroundColor Green
      }
      [Environment]::SetEnvironmentVariable("MSYS2_PATH_TYPE", "inherit", "Machine")
      # install latest pacman
      bash 'pacman -Sy --noconfirm pacman pacman-mirrors'
      # update core packages
      bash 'pacman -Syu --noconfirm'
      bash 'pacman -Syu --noconfirm'
      # install packages
      bash 'pacman --sync --noconfirm VCS'
      bash 'pacman --sync --noconfirm base-devel'
      bash 'pacman --sync --noconfirm msys2-devel'
      bash 'pacman --sync --noconfirm mingw-w64-{x86_64,i686}-toolchain'
      # compact folder
      Write-Host "Compacting C:\msys64..." -NoNewline
      compact /c /i /s:C:\msys64 | Out-Null
      Write-Host "OK" -ForegroundColor Green
      Write-Host "MSYS2 installed" -ForegroundColor Green            
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init.exe -y --default-toolchain=nightly-2017-04-25-x86_64-pc-windows-msvc
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin

  # Install the target we're compiling for
  - if NOT "%TARGET%" == "x86_64-pc-windows-msvc" rustup target add %TARGET%

  # add mingw to PATH if necessary
  - if defined MINGW_DIR set PATH=C:\msys64\%MINGW_DIR%\bin;C:\msys64\usr\bin;%PATH%

  # set cargo features for MSI if requested (otherwise empty string)
  - set FEATURES=
  - if defined BUILD_MSI set FEATURES=--features msi-installed

  # let's see what we got
  - where gcc rustc cargo
  - rustc -vV
  - cargo -vV

build: false

test_script:
  - cargo build --release --target %TARGET% %FEATURES%
  - cargo test --release -p rustup-dist --target %TARGET%
  - cargo test --release --target %TARGET% %FEATURES%
  - ps: |
      if($env:BUILD_MSI) {
        cd src\rustup-win-installer
        cargo build --release --target $env:TARGET
        cd msi
        .\build.ps1 -Target $env:TARGET
        cd ..\..\..
        if($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

notifications:
  - provider: Webhook
    url: https://webhooks.gitter.im/e/9907ad94eb7a5ff291c3

after_test:
  - powershell -File ci/prepare-deploy-appveyor.ps1

artifacts:
  - path: dist\$(TARGET)\rustup-init.exe
    name: rustup-init
  - path: dist\$(TARGET)\rustup-init.exe.sha256
    name: rustup-init-sha
  - path: dist\$(TARGET)\rustup-setup.exe
    name: rustup-setup
  - path: dist\$(TARGET)\rustup-setup.exe.sha256
    name: rustup-setup-sha

deploy:
  - provider: S3
    skip_cleanup: true
    access_key_id: AKIAIZT5ZFS5N2VNRGPA
    secret_access_key:
      secure: viw7GCfVF0QlY0fghoxO3Lux/Wo4u6PxxgUwEq5cs4w69tlv9KzIIw74Nc7KJdgt
    bucket: dev-static-rust-lang-org
    set_public: true
    region: us-west-1
    artifact: rustup-init,rustup-init-sha,rustup-setup,rustup-setup-sha
    folder: rustup
    on:
      branch: stable
