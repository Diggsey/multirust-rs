dist: xenial
services:
  - docker
language: minimal
addons:
  apt:
    packages:
      - gdb

git:
  depth: false
  quiet: true

matrix:
  fast_finish: true
  include:
    # Linux builds use the `rust-slave-dist` image so we link them against a
    # "super old glibc" to ensure that it runs on as many platforms as possible.
    - os: linux
      env: TARGET=x86_64-unknown-linux-gnu NO_ADD=1
    - &linux
      os: linux
      env: TARGET=i686-unknown-linux-gnu
      if: branch != master

    # Cross builds happen in the `rust-slave-linux-cross` image to ensure that
    # we use the right cross compilers for these targets. That image should
    # bundle all the gcc cross compilers to enable us to build OpenSSL
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=arm-unknown-linux-gnueabi       }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=arm-unknown-linux-gnueabihf     }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=armv7-unknown-linux-gnueabihf   }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=aarch64-unknown-linux-gnu       }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=x86_64-unknown-freebsd          }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=powerpc-unknown-linux-gnu       }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=powerpc64-unknown-linux-gnu     }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=powerpc64le-unknown-linux-gnu   }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=mips-unknown-linux-gnu          }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=mipsel-unknown-linux-gnu        }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=mips64-unknown-linux-gnuabi64   }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=mips64el-unknown-linux-gnuabi64 }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=s390x-unknown-linux-gnu         }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=arm-linux-androideabi           }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=armv7-linux-androideabi         }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=aarch64-linux-android           }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=i686-linux-android              }
    - { <<: *linux, env: SKIP_TESTS=1 TARGET=x86_64-linux-android            }

    # On OSX we want to target 10.7 so we ensure that the appropriate
    # environment variable is set to tell the linker what we want.
    #
    # TODO: figure out why `xcode9.3`, the first image with OSX 10.13, breaks.
    # Unclear why!
    - &mac
      os: osx
      osx_image: xcode9.2
      if: branch != master
      env: MACOSX_DEPLOYMENT_TARGET=10.7 TARGET=x86_64-apple-darwin NO_ADD=1
    - <<: *mac
      env: MACOSX_DEPLOYMENT_TARGET=10.7 TARGET=i686-apple-darwin

install:
  - sh ./rustup-init.sh --default-toolchain=stable -y
  - . "$HOME/.cargo/env"
  - if [ -z "$NO_ADD" ]; then rustup target add "$TARGET"; fi
  - rustup component add rustfmt

script:
  - mkdir -p target/"$TARGET";
  - >
      case "$TARGET" in
        *-linux-android*) DOCKER=android  ;; # Android uses a local docker image
        *-apple-darwin)                   ;;
        *)                DOCKER="$TARGET";;
      esac;
      if [ -n "$DOCKER" ]; then
          sh ci/build-run-docker.sh "$DOCKER" "$TARGET" "$SKIP_TESTS";
      else
          sh ci/run.sh;
      fi
  # Check the formatting last because test failures are more interesting to have
  # discovered for contributors lacking some platform access for testing beforehand
  - if [ "${TARGET}" = x86_64-unknown-linux-gnu ]; then
      shellcheck -s dash -e SC1090 -- rustup-init.sh ci/*.sh;
      cargo fmt --all -- --check;
    fi

# Random attempt at debugging currently. Just poking around in here to see if
# anything shows up.
after_failure:
  # Dump backtrace for macOS
  - ls -lat "$HOME"/Library/Logs/DiagnosticReports/
  - find "$HOME"/Library/Logs/DiagnosticReports
      -type f
      -name '*.crash'
      -not -name '*.stage2-*.crash'
      -not -name 'com.apple.CoreSimulator.CoreSimulatorService-*.crash'
      -exec printf travis_fold":start:crashlog\n\033[31;1m%s\033[0m\n" {} \;
      -exec head -750 {} \;
      -exec echo travis_fold":"end:crashlog \; || true

  # Dump backtrace for Linux
  - ln -s . checkout &&
    for CORE in obj/cores/core.*; do
      EXE=$(echo $CORE | sed 's@obj/cores/core\.[0-9]*\.!checkout!\(.*\)@\1@;y@!@/@');
      if [ -f "$EXE" ]; then
        printf travis_fold":start:crashlog\n\033[31;1m%s\033[0m\n" "$CORE";
        gdb --batch -q -c "$CORE" "$EXE"
          -iex 'set auto-load off'
          -iex 'dir src/'
          -iex 'set sysroot .'
          -ex bt
          -ex q;
        echo travis_fold":"end:crashlog;
      fi;
    done || true

before_deploy:
  - sh ci/prepare-deploy-travis.sh

deploy:
  - provider: s3
    bucket: dev-static-rust-lang-org
    skip_cleanup: true
    local_dir: deploy
    upload_dir: rustup
    acl: public_read
    region: us-west-1
    access_key_id: $AWS_ACCESS_KEY_ID
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    on:
      branch: stable
